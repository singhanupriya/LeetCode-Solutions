class Solution {
public:
    bool isValid(int rows,int columns,int i,int j,vector<vector<bool>>& visited)
    {
        if(i>=0 && i<rows && j>=0 && j<columns && visited[i][j]==0)
        {
            return true;
        }
        return false;
    }
    
    void dfs(int rows, int columns,vector<vector<bool>>& visited, int i,int j)
    {
        visited[i][j]=1;
        
        for(int x=-1;x<=1;x++)
        {
            for(int y=-1;y<=1;y++)
            {
                if(x==y && x==0)
                {
                    continue;
                }
                
                if((x+y==0) || (x*y==1))
                {
                    continue;
                }
                
                if(isValid(rows,columns,i+x,j+y,visited))
                {
                    dfs(rows,columns,visited,i+x,j+y);
                }
            }
        }
    }
    
    int numIslands(vector<vector<char>>& grid) {
        
        int rows=grid.size();
        int columns=grid[0].size();
        
        vector<vector<bool>> visited(rows,vector<bool>(columns,0));
        
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<columns;j++)
            {
                if(grid[i][j]=='0')
                {
                    visited[i][j]=1;
                }
            }
        }
        
        
        int count=0;
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<columns;j++)
            {
                if(visited[i][j]==0)
                {
                    dfs(rows,columns,visited,i,j);
                    count++;
                }
            }
        }
        
        return count;
        
        
    }
};
