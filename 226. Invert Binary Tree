/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void invert(TreeNode* root,TreeNode* root1)
    {
        
        if(!root)
        {
            return;
        }
        
        if(root->left)
        {
            root1->right=new TreeNode(root->left->val);
            invert(root->left,root1->right);
        }
        
        if(root->right)
        {
            root1->left=new TreeNode(root->right->val);
            invert(root->right,root1->left);
        }
        
        
    }
        
    
    TreeNode* invertTree(TreeNode* root) {
        
        if(!root)
        {
            return NULL;
        }
        
        TreeNode* root1=new TreeNode(root->val);
        
        invert(root,root1);
        return root1;
        
    }
};






METHOD 2




/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
   
    
    TreeNode* invertTree(TreeNode* root) {
        
        if(!root)
        {
            return NULL;
        }
        
        TreeNode* temp=root->left;
        root->left=root->right;
        root->right=temp;
        
        
        invertTree(root->left);
        invertTree(root->right);
        
        return root;
        
    }
};
