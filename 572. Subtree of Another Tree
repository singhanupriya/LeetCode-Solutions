/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool identical(TreeNode* p, TreeNode* q)
    {
        if(!p && !q)
        {
            return true;
        }
        
        if(!(p && q))
        {
            return false;
        }
        
        if(p-> val != q->val)
        {
            return false;
        }
        
        return identical(p->left, q->left) && identical(p->right,q->right);
    }
    
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        
        queue<TreeNode* > q;
        
        q.push(root);
        
        while(!q.empty())
        {
            TreeNode* curr=q.front();
            
            q.pop();
            
            if(curr->val == subRoot->val)
            {
                bool res=identical(curr,subRoot);
                if(res)
                {
                    return true;
                }
                
                
            }
            
            if(curr->left)
            {
                q.push(curr->left);
            }
            
            if(curr->right)
            {
                q.push(curr->right);
            }
        }
        
        return false;
        
        
    }
};
