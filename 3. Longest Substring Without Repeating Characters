class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
        int i=0,j=0,k=0;
        int n=s.length();
        
        unordered_map<char,int> m;
        
        while(j<n)
        {
            
            m[s[j]]++;
            
            
            
            if(m.size()==j-i+1)
            {
                if(k<j-i+1)
                {
                    k=j-i+1;
                }
                
            }
            else 
                
            {
                //map size will always be less than the window size
               while(m.size()<j-i+1)
               {
                   m[s[i]]--;
                    if(m[s[i]]==0)
                    {
                        m.erase(s[i]);
                    }
                    i++;
               }
                
                
            }
            
            
            //check again after removing the char
            if(m.size()==j-i+1)
            {
                if(k<j-i+1)
                {
                    k=j-i+1;
                }
            }
            
            j++;
            
            
            
            
        }
        
        return k;
        
        
    }
};
