//Using BFS


class Solution {
public:
    unordered_map<int,vector<int>> graph;
    
    
    void bfs(unordered_map<int,vector<int>> graph,int source, vector<bool>& visited)
    {
        
        queue<int> q;
        q.push(source);
        visited[source]=1;
        
        while(!q.empty())
        {
            int curr=q.front();
            q.pop();
            
            for(int i=0;i<graph[curr].size();i++)
            {
                if(visited[graph[curr][i]]==0)
                {
                    q.push(graph[curr][i]);
                    visited[graph[curr][i]]=1;
                    
                }
            }
        }
        
    }
    
    int countComponents(int n, vector<vector<int>>& edges) {
        
        vector<bool> visited(n,0);
        
        for(int i=0;i<edges.size();i++)
        {
            graph[edges[i][0]].push_back(edges[i][1]);
            graph[edges[i][1]].push_back(edges[i][0]);
        }
        
        
        
        int count=0;
        
        for(int i=0;i<n;i++)
        {
            if(visited[i]==0)
            {
                bfs(graph,i,visited);
                count++;
            }
        }
        
        return count;
        
    }
};
