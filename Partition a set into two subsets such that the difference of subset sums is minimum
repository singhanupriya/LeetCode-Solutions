//Partition a set into two subsets such that the difference of subset sums is minimum - https://www.geeksforgeeks.org/partition-a-set-into-two-subsets-such-that-the-difference-of-subset-sums-is-minimum/

int minDiff(vector<int> set)
{
	
	int n=set.size();
	
	//s1 and s2 will be in range of [0, sumOfArray]
	
	int sum=0;
	for(int i=0;i<n;i++)
	{
		sum=sum+set[i];
	}
	
	//s2= sum- s1, hence diff=sum-2*s1, in order to min the diff, we need to max s1, for every s1 we can find s2 as sum-s1, so we only need to find the max value of s1.
	// hence,we only need to find if a sum exists between [0, sum/2]
	
	int range=(sum/2);
	
	vector<vector<bool>> dp(n+1, vector<bool>(range+1,0));
	
	dp[0][0]=1;
	
	for(int i=1;i<=range;i++)
	{
		dp[0][i]=0;
	}
	
	for(int i=1;i<=n;i++)
	{
		dp[i][0]=1;
	}
	
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=range;j++)
		{
			if(set[i-1]<=j)
			{
				dp[i][j]= dp[i-1][j-set[i-1]] || dp[i-1][j];
			}
			else
			{
				dp[i][j]=dp[i-1][j];
			}
		}
	}
	
	//check the max sum closest to sum/2
	
	int diff=INT_MAX;
	
	for(int i=range;i>=0;i--)
	{
		if(dp[n][i]==1)
		{
			diff=sum-(2*i);
			break;
		}
	}
	
	return diff;
	
}
