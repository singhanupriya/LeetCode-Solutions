//Kahn's Topological sort
#include<iostream>
#include<list>
#include<queue>
#include<vector>

using namespace std;

class Graph{
	
	int V;
	
	list<int>* adj;
	
	
	public:
		Graph(int vertices)
		{
			V=vertices;
			adj=new list<int>[V];
		}
		
		void edge(int start, int end)
		{
			adj[start].push_back(end);
		}
		
		void topological(int V);
	

	
};



void Graph::topological(int V)
{
	vector<int> indegree(V,0);
	
	for(int i=0;i<V;i++)
	{
		list<int>::iterator it;
		
		for(it=adj[i].begin();it!=adj[i].end();it++)
		{
			indegree[*it]++;
		}
	}
	
	queue<int> q;
	
	int vertex_count=0;
	
	for(int i=0;i<V;i++)
	{
		if(indegree[i]==0)
		{
			q.push(i);
			vertex_count++;
		}
	}
	
	while(!q.empty())
	{
		int f_vertex=q.front();
		cout<<q.front()<<" ";
		
		q.pop();
		
		list<int>::iterator it;
		
		for(it=adj[f_vertex].begin();it!=adj[f_vertex].end();it++)
		{
			indegree[*it]--;
			if(indegree[*it]==0)
			{
				q.push(*it);
				vertex_count++;
				
			}
		}
		
		
		
		
	}
	
	if(vertex_count!=V)
	{
		cout<<"Cycle detected\n";
		return;
	}

	
	
	
}


int main()
{
	Graph g(5);
	g.edge(0,1);
	g.edge(1,2);
	g.edge(3,2);
	g.edge(3,4);
	
	
	g.topological(5);
	
	
	
	
	
	return 0;
}
