//O(n*2)

class Solution {
public:
    int min(int a,int b)
    {
        if(a<=b)
        {
            return a;
        }
        return b;
    }
    
    int jump(vector<int>& nums) {
        
        int n=nums.size();
        
        vector<int> dp(n,INT_MAX);
        dp[0]=0;
        
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                if(j+nums[j]>=i  && dp[j]!=INT_MAX)
                {
                    dp[i]=min(dp[i],dp[j]+1);
                }
            }
        }
        
        return dp[n-1];
        
    }
};


O(N)
class Solution {
public:
    
    int max(int a,int b)
    {
        if(a>=b)
        {
            return a;
        }
        return b;
    }
    
    
    int jump(vector<int>& nums) {
        
        int n=nums.size();
        
        if(n==0 || n==1)
        {
            return 0;
        }
        
        if(nums[0]==0)
        {
            return 0;
        }
        
        int max_index=nums[0];
        int steps=nums[0];
        int jump=1;
        
        for(int i=1;i<n;i++)
        {
            if(i==n-1)
            {
                return jump;
            }
            
            max_index=max(max_index,i+nums[i]);
            steps--;
            
            if(steps==0)
            {
                jump++;
                
                if(i>=max_index)
                {
                    return -1;
                }
                steps=max_index-i;
            }
        }
        
        return -1;
        
    }
};
