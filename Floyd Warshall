//Flyod Warshall algorithm

#include<iostream>
#include<vector>
#include<climits>

using namespace std;

void floyd(vector<vector<int>> graph, int V)
{
	vector<vector<int>> dist;
	
	dist={
		{0,   5,  INT_MAX, 10},
        {INT_MAX,  0,  3,  INT_MAX},
        {INT_MAX, INT_MAX, 0,   1},
        {INT_MAX, INT_MAX, INT_MAX, 0}
	
	
	};
	
	
	
	
	
	for(int k=0;k<V;k++)
	{
		for(int i=0;i<V;i++)
		{
			for(int j=0;j<V;j++)
			{
				if(dist[i][k]!=INT_MAX && dist[k][j]!=INT_MAX && dist[i][j]> dist[i][k] + dist[k][j])
				{
					dist[i][j]= dist[i][k] + dist[k][j];
				}
			}
		}
	}
	
	for(int i=0;i<V;i++)
	{
		for(int j=0;j<V;j++)
		{
			cout<<dist[i][j]<<" ";
		}
		cout<<"\n";
	}
	
}



int main()
{
	vector<vector<int>> graph;
	
	graph={
		{0,   5,  INT_MAX, 10},
        {INT_MAX,  0,  3,  INT_MAX},
        {INT_MAX, INT_MAX, 0,   1},
        {INT_MAX, INT_MAX, INT_MAX, 0}
	
	
	};
	
	
	int V=4;
	
	floyd(graph,V);
	
	
	return 0;
}
