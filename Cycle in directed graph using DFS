//Cycle in directed graph using DFS
#include<iostream>
#include<unordered_map>
#include<vector>

using namespace std;

bool dfs(unordered_map<int,vector<int>> graph, vector<bool>& visited, int start, vector<bool>& ans)
{
	visited[start]=1;
	ans[start]=1;
	
	for(int i=0;i<graph[start].size();i++)
	{
		if(!visited[graph[start][i]])
		{
			if(dfs(graph, visited, graph[start][i], ans))
			{
				return true;
			}
		}
		else
		{
			if(ans[graph[start][i]])
			{
				return true;
			}
		}
	}
	
	ans[start]=0;
	
	return false;
}



int main()
{
	unordered_map<int,vector<int>> graph;
	
	graph[0]={1};
	graph[1]={2};
	graph[2]={3};
	graph[3]={4,5,1};
	graph[4]={};
	graph[5]={4};
	
	
	vector<bool> visited(6,0);
	
	vector<bool> ancestor(6,0);
	
	cout<<dfs(graph, visited, 0, ancestor);
	
	
	
	
	return 0;
}
