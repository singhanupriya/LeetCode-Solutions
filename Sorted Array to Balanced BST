/* Sorted Array to balanced BST

1. Mid point of the sorted array will be the root of the balanced BST
2. Elements left of mid will be in left subtree
3. Elements right of mid will be in right subtree


*/

#include<iostream>
#include<vector>


using namespace std;

class TreeNode{
	public:
		int val;
		TreeNode* left;
		TreeNode* right;
		
		TreeNode(int data)
		{
			val=data;
		}
};

TreeNode* convert(vector<int>& v, int start, int end)
{
	if(start>end)
	{
		return NULL;
	}
	
	int mid=(start+end)/2;
	TreeNode* root=new TreeNode(v[mid]);
	
	root->left=convert(v,start,mid-1);
	root->right=convert(v,mid+1,end);
	
	return root;
	
}

void inorder(TreeNode* root)
{
	if(root!=NULL)
	{
		inorder(root->left);
		cout<<root->val<<" ";
		inorder(root->right);
		
	}
}




int main()
{
	
	vector<int> v{10,12,15,20,24,28};
	int n=v.size();
	TreeNode* root=convert(v,0,n-1);
	inorder(root);
	
	
	
	
	
	
	
	return 0;
}
