Find minimum number of coins that make a given value: https://www.geeksforgeeks.org/find-minimum-number-of-coins-that-make-a-change/

//Recursion
#include<iostream>
#include<vector>
#include<climits>

using namespace std;

int min(int a,int b)
{
	if(a<=b)
	{
		return a;
	}
	return b;
}

int count(int N, vector<int> arr, int m)
{
	if(N==0 || m==0)
	{
		return 0;
	}
	
	int s_res=INT_MAX;
	//int res=0;
	
	for(int i=0;i<m;i++)
	{
		if(arr[i]<=N)
		{
			
			int res=1+count(N-arr[i],arr,m);
			if(res!=INT_MAX && res<s_res)
			{
				s_res=res;
			}
			
		}
	}
	return s_res;
	
	
}

int main()
{
	vector<int> arr={9, 6, 5, 1};
	cout<<count(11,arr,4);
	
	return 0;
}


Iterative:

class Solution{

	public:
	int minCoins(int coins[], int M, int V) 
	{ 
	    vector<int> dp(V+1,INT_MAX);
	    dp[0]=0;
	    
	    for(int i=1;i<=V;i++)
	    {
	        for(int j=0;j<M;j++)
	        {
	            if(coins[j]<=i && dp[i-coins[j]]!=INT_MAX)
	            {
	                dp[i]=min(1+dp[i-coins[j]],dp[i]);
	            }
	        }
	    }
	    
	    if(dp[V]==INT_MAX)
	    {
	        return -1;
	    }
	    return dp[V];
	} 
	  
};
