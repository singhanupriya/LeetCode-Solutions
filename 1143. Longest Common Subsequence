Recursive
int max(int a,int b)
    {
        if(a>=b)
        {
            return a;
        }
        return b;
    }
    
    int lcs(string text1, int m, string text2, int n, vector<vector<int>>& dp)
    {
        
        
        if(m==0 || n==0)
        {
            return 0;
        }
        
        if(dp[m][n]!=-1)
        {
            return dp[m][n];
        }
        
        if(text1[m-1]==text2[n-1])
        {
            dp[m][n]=1+lcs(text1,m-1,text2,n-1,dp);
            return dp[m][n];
        }
        
        dp[m][n]=max(lcs(text1,m-1,text2,n,dp),lcs(text1,m,text2,n-1,dp));
        return dp[m][n];
        
    }
    
    int longestCommonSubsequence(string text1, string text2) {
        
        int m=text1.length();
        int n=text2.length();
        
        cout<<m<<" "<<n<<"\n";
        
        vector<vector<int>> dp(m+1,vector<int>(n+1,-1));
        
        
        
        
        for(int i=0;i<m+1;i++)
        {
            for(int j=0;j<n+1;j++)
            {
                cout<<dp[i][j]<<" ";
            }
            cout<<"\n";
        }
        
        return lcs(text1,m,text2,n,dp);
        
    }

Iterative
