//Cycle in undirected graph using DFS
#include<iostream>
#include<unordered_map>
#include<vector>

using namespace std;

bool dfs(unordered_map<int,vector<int>> graph, vector<bool>& visited, int start, int parent)
{
	visited[start]=1;
	
	for(int i=0;i<graph[start].size();i++)
	{
		if(!visited[graph[start][i]])
		{
			if(dfs(graph, visited, graph[start][i], start))
			{
				return true;
			}
		}
		else
		{
			if(graph[start][i]!=parent)
			{
				return true;
			}
		}
	}
	
	return false;
}



int main()
{
	unordered_map<int,vector<int>> graph;
	
	graph[0]={1,2};
	graph[1]={0,2};
	graph[2]={1,3};
	graph[3]={0};
	
	vector<bool> visited(4,0);
	
	bool ans=dfs(graph, visited, 0, -1);
	cout<<ans;
	
	
	
	return 0;
}
