//Topological sort
#include<iostream>
#include<list>
#include<stack>
#include<vector>

using namespace std;

class Graph{
	
	int V;
	
	list<int>* adj;
	void topological_utility(int start, vector<bool>& visited,stack<int>& s);
	
	public:
		Graph(int vertices)
		{
			V=vertices;
			adj=new list<int>[V];
		}
		
		void edge(int start, int end)
		{
			adj[start].push_back(end);
		}
		
		void topological(int V);
	

	
};

void Graph::topological_utility(int start, vector<bool>& visited,stack<int>& s)
{
	visited[start]=1;
	
	list<int>::iterator it;
	
	for(it=adj[start].begin();it!=adj[start].end();it++)
	{
		if(!visited[*it])
		{
			topological_utility(*it, visited,s);
		}
	}
	
	s.push(start);
	
	
	
}

void Graph::topological(int V)
{
	stack<int> s;
	
	vector<bool> visited(V,0);
	
	for(int i=0;i<V;i++)
	{
		if(!visited[i])
		{
		    topological_utility(i, visited,s);
		}
		
	}
	
	while(!s.empty())
	{
		cout<<s.top()<<" ";
		s.pop();
	}
	
	
	
}


int main()
{
	Graph g(6);
	g.edge(1,0);
	g.edge(1,3);
	g.edge(3,5);
	g.edge(2,0);
	g.edge(2,4);
	g.edge(4,5);
	
	g.topological(6);
	
	
	
	
	
	return 0;
}
