class Solution {
public:
    
    bool dfs(unordered_map<int, vector<int>> graph, vector<bool>& visited, int source,int parent)
    {
        visited[source]=1;
        
        for(int i=0;i<graph[source].size();i++)
        {
            if(visited[graph[source][i]]==0)
            {
                if(dfs(graph,visited,graph[source][i],source))
                {
                    return true;
                }
            }
            else
            {
                if(graph[source][i]!=parent)
                {
                    return true;
                }
            }
        }
        
        return false;
    }
        
    unordered_map<int, vector<int>> graph;
    
    bool validTree(int n, vector<vector<int>>& edges) {
        
        vector<bool> visited(n,0);

        for(int i=0;i<edges.size();i++)
        {
            graph[edges[i][0]].push_back(edges[i][1]);
            graph[edges[i][1]].push_back(edges[i][0]);
        }
        
        bool cycle=dfs(graph,visited,0,-1);
        
        if(cycle)
        {
            return false;
        }
        else
        {
            for(int i=0;i<visited.size();i++)
            {
                if(visited[i]==0)
                {
                    return false;
                }
            }
            
            return true;
        }
        
    }
};
